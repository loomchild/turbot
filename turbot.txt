Intro (1m) ---------------------------------

Wasn't sure what to show you since Turbo is still evolving, best practices are being developed.
Actually JS is not a problem, stateful JS is.
HTML over the wire
Also hard to show it in a short presentation, so I chose a small part: Drive and Frames. 
Just speak up if you have a question.



Product and code tour (3m) -----------------------------

Generally app generated, with one resource and some dummy content added and disabled Turbo.

Show the app, open an event.
Data is seeded from FOSDEM conference, about 700 talks.
Show page (7 things event, A case for DAG databases (2nd page) is nice).
Paging.

Model -> schema.rb, routes, controller: paging, views (focus): show standard back button, index: dummy content, loop (no partial for simplicity), paginatuion.
Turbo.session.drive = false => it's opt-out

Using latest turbo-rails, released last week. Using TailwindCSS as you might have noticed

opacity-30 for image/lorem ipsum to focus.
Commit after the change

Application is pretty neat and fast, but we can already see problems, most notably scroll position.
Also fast, because it's local - each visit a page refresh, as we can see in Network tab (but not too bad since browsers are smart.

Problems:
- scrolling. Requires something like turbo.

Turbo Drive (2m) ------------------------------

Turbo Drive accelerates links and form submissions by negating the need for full page reloads.

Enable it -> 
Application is sleeker:
- speed of navigation - no need to reload the whole page

- Replaces body, but generally leaves the head as is (can be customized) 
Less requests, even if to cache.

<enable throttle>

- caching when going forward (retrieve page from cache first and displays it, then makes a request)

- just neat tricks - but it doesn't help with the pagination:)

<disable throttle>


Fix scrolling with Frames (5m) ----------------------------

Turbo Frames decompose pages into independent contexts, which scope navigation and can be lazily loaded.

<turbo-frame id="events"> zamiast DIV

Show console, content missing.

Explain Nav within frame: it looks for <turbo-frame> element with the same ID. 
Add <turbo-frame> to event page to show how it works, but not what we want.
Fix show event page.

Special frame called _top, and on each link or form we can target a specific form.
  <%= link_to event.title, event, data: { 'turbo-frame': '_top' } %>


New feature: search box (5m) -----------------------------

def index
...
    @query = params[:query]
    @events = @events.where('title LIKE :query OR subtitle LIKE :query OR abstract LIKE :query OR speakers LIKE :query', { query: "%#{@query}%" }) if @query

<div>
  <%= form_with url: events_path, method: :get do |form| %>
    <%= form.text_field :query, placeholder: 'Filter events', autocomplete: 'off', value: @query %>
  <% end %>
</div>

Remember to press enter

Problems:
- product feedback - I want search-as-you-type

Fix: (I cheated there would be no JS)
 oninput: "this.form.requestSubmit()"

- IMPORTANT: loses focus, was happening before but now especially disturbing
- scrolls to the top

How to do it with Frames:
- Move search box outside.


Need to target the right frame:
- data: { 'turbo-frame': 'events' } on <form>


Try: 
- show Network tab, what's happening there? -> request for each 



Problem:
- query or page not reflected in URL -> refresh will go back to 1 -> but back and forth works OK.

<enable and disable throttle to show it can be fast>
Can be further improved by loading data to each frame separately via controller.


Also: a bit complicated solution.
Maybe something simpler exists.

SORTA... latest version released last week adds refresh scroll and morph. Let's see how it works.

Next time, I can perhaps show an solution and play with Morph. 


END ---------------
- sleeker and solved 2 issues not possible without Turbo: scrolling and preserving focus on input field.
- hope you found this presentation intriguing, and want to continue exploring alternative solutions to front-end development
- part 2 possible with more advanced features, such as streaming / broadcasting updates. MORPH (currently very limited since works only if refreshing the same page, developing)



Permanent (optional) ----------------------

Revert all changes after commit.

Manuall changes in index.html.erb, in <turbo-frame>, leave the search box.
Remove turbo-frame from it.

Add ID and data-turbo-permanent

<div id="search" data-turbo-permanent>
  <%= form_with url: events_path, method: :get do |form| %>
    <%= form.text_field :query, placeholder: 'Filter events', autocomplete: 'off', value: @query, ninput: 'this.form.requestSubmit()' %>
  <% end %>
</div>

Problem:

SCROLLS up.


Scrolling fix -------------------

<% content_for :head do %>
  <meta name="turbo-refresh-scroll" content="preserve">
<% end %>

Breaks back button scroll -> raised an issue.




STREAMS and MORPH: next time if you like.
Issue: morph limited, works only if page is exactly the same, so need to update DB or store state in session.
Got it working but code was somewhat ugly (need to pass data between session.) -> needs best practices or improvements. Also authors state that it's currently not a replacement for STREAMS or FORMSqg.

  <meta name="turbo-refresh-method" content="morph">


  def create
    session[:query] = params[:query]

    redirect_to events_path
  end




Scroll per app (so simpler)?


Turbo: The speed of a single-page web application without having to write any JavaScript 

1. Build an app that displays events.
2. Enable turbo - benefits: faster, no need to update HEAD (although cached)
3. Add search box. Show that it loses focus on search
4b. Add extra content above and below? Or maybe invert and first explain frames?
5. Frame
4. Permanent.
4b. Scroll but requires scroll? => problems with it
6. Morph?


References:
0. Link to code repo
1. Official docs
2. https://www.hotrails.dev
3. Official Morphing: https://dev.37signals.com/a-happier-happy-path-in-turbo-with-morphing/
4. Evil Martians


Load fosdem events all for searching 2023. Also needs descriptions.
Show what travels over the wire.


For server-side demo: enable GPRS throttling.
Also shows the navigation icon.

I want to show that:
- it's fast (search, maybe over the server show too?)
- it's easy (no JS at all ideal)
- it's powerful

Not some general way of building applications.

Turbo:
Drive
Frames?
Streams??

Some slides too:
There's no cleint side:
- state
- router

Maybe show how form submit happens, that button is switched to disabled.
422 thingy or 303 (show it in action)

Frames as a trick for browser edit is not a good idea it seems -> the main reasons for frames are caching, parallization => not sure if worthy. They also generally shouldn't change URL if I understand correctly.

How it works:
- intercepts link clicks and form submits (show in browser)
- replaces body keeps the head (already a benefit)

animation.
popover?

Frames allow you to replace just part of the page
- how to show it? => example with paging and search?
- show some errors if not matching frame

But wait, there's more: morph 
- merged last week 
- how to best show it, where it shines? -> multiple distinct regions. => broadcast no...
--> only with refresh visit (what does it mean?) -> when turbo renders the same page again
--> actually mostly for scroll position?
--> benefits: focus, text selection, scroll + broadcasting action as an alternative to sending individual stream updates (before, after, etc.) => maybe here shine an example?

Turbo refresh scroll works on its own, without morph. When page URL changes it's not morph.
Morph only on replace and when URL didn't change or when from cache



Central question for the future: decide what is server-side and what is client side. 

IDEA: input.isDirty could be taken into account when morphing
isDirty obtained by comparing value and defaultValue.

Hypothesis about frames / streams:
- state should be stored on the server, so:
  - forms should be generated there and show with JS
  - or they should be generated based on server state: e.g. params, session 
  	- perhaps even some specialized store only for this path, or try with flash?
OH shit:
- form value is replacing with old on morph.
- js-based show will also be replaced in morph.

Goal of the talk is to teach.
Present turbo, try to avoid streams and frames. 

Perhaps modals example? (search)




IDEA: show with Turbo 8 disabled, and discover what problems we will hit.

Maybe a demo at the end with other uses:
- search
- navigating table while graph above is visible

Autocomplete for Tailwind doesn't work.	
Maybe no tailwind and just CSS, since it lacks even basic styling and can be confsing -> but then ugly.

App idea:
table
with paging
search

Prepare seed in advance (cheat)
Everything else from scratch or is it too much?
Use resources generator

Pagination: simple
How to do search? Simple by name
Maybe add some more props, like speaker.

Alpha order.
Next-Prev at the bottom

Maybe add this BO first, to train with it?

bonus: JS to 


Practical Introduction to Turbo
from zero to hero

IDEAS:
- Table with paging and search
	- small, even pagination is already nice
	- people can relate to this stuff
	- search more complicated
	- input is not deleting => nice
	- scroll show by adding more elements on the page: morph shines; maybe even set the second setting separately.

- Graph with transitions?
	- or maybe Graph above a table show to see how interactive it is? (<= good idea)

- Some CRUD -> try to modify https://www.hotrails.dev? 
	- similar to the tutorial online, but with 8?
	- will still require frames, perhaps good?
	- trick with IDs for each element to morph to work when adding? dom_id can be used?
	- maybe multi-edit will work if I have frames everywhere
	- multi-edit on array is a weird use case, better present it as multiple distinct fields edit.
